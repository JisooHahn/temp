<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.app.temp.mapper.MemberMapper">
    <insert id="insert">
        <selectKey keyProperty="id" order="BEFORE" resultType="long">
            SELECT SEQ_MEMBER.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO TBL_MEMBER
        (ID, MEMBER_NAME, MEMBER_EMAIL, MEMBER_PROFILE_PATH)
        VALUES(#{id}, #{memberName}, #{memberEmail}, #{memberProfilePath})
    </insert>
    <select id="selectById" resultType="memberVO">
        SELECT ID, MEMBER_NAME, MEMBER_EMAIL, MEMBER_PHONE, MEMBER_EMAIL,  MEMBER_PROFILE_PATH, MEMBER_CLASS, MEMBER_POINT, MEMBER_STATUS, CREATED_DATE, UPDATED_DATE
        FROM TBL_MEMBER WHERE ID = #{id}
    </select>
    <select id="selectByEmail" resultType="memberVO">
        SELECT ID, MEMBER_NAME, MEMBER_PHONE, MEMBER_EMAIL,  MEMBER_PROFILE_PATH, MEMBER_CLASS, MEMBER_POINT, MEMBER_STATUS, CREATED_DATE, UPDATED_DATE
        FROM TBL_MEMBER WHERE MEMBER_EMAIL=#{memberEmail}
    </select>
    <update id="updateMemberRecentLogin">
        UPDATE TBL_MEMBER
        SET MEMBER_RECENT_LOGIN = SYSDATE
        WHERE ID = #{id}
    </update>
    <update id="updateMemberClass">
        UPDATE TBL_MEMBER
        SET MEMBER_CLASS = '기업'
        WHERE ID = #{id}
    </update>
    <select id="selectByMemberEmail" resultType="memberDTO">
        SELECT ID, MEMBER_EMAIL, TO_CHAR(MEMBER_BIRTH,'YYYY') AS MEMBER_BIRTH, MEMBER_NAME, CREATED_DATE, UPDATED_DATE
        FROM TBL_MEMBER
        WHERE MEMBER_EMAIL = #{memberEmail}
    </select>
    <select id="selectByMemberId" resultType="memberDTO">
        SELECT ID, MEMBER_NAME, MEMBER_PHONE, MEMBER_EMAIL,  MEMBER_PROFILE_PATH, MEMBER_CLASS, MEMBER_POINT, MEMBER_STATUS, CREATED_DATE, UPDATED_DATE, TO_CHAR(MEMBER_BIRTH,'YYYY') AS MEMBIR_BIRTH
        FROM TBL_MEMBER WHERE ID = #{id}
    </select>
    <!-- 관리자용 -->
    <select id="selectAllAdmin" resultType="memberAdminListDTO">
        SELECT ID, MEMBER_NAME, MEMBER_EMAIL, TO_CHAR(CREATED_DATE, 'YYYY-MM-DD') AS CREATED_DATE, TO_CHAR(MEMBER_RECENT_LOGIN, 'YYYY-MM-DD') AS MEMBER_RECENT_LOGIN, MEMBER_STATUS, MEMBER_PHONE, MEMBER_PROFILE_PATH
        FROM (
        SELECT ID, ROWNUM R, MEMBER_NAME, MEMBER_EMAIL, CREATED_DATE, MEMBER_RECENT_LOGIN, MEMBER_STATUS, MEMBER_PHONE, MEMBER_PROFILE_PATH
        FROM
        (
        SELECT ID, MEMBER_NAME, MEMBER_EMAIL, CREATED_DATE, MEMBER_RECENT_LOGIN, MEMBER_STATUS, MEMBER_PHONE, MEMBER_PROFILE_PATH
        FROM TBL_MEMBER
        WHERE ID IS NOT NULL
        <if test="status != 'all' and status != null">
            AND MEMBER_STATUS = #{status}
        </if>
        <if test="memberKeyword != null">
            AND MEMBER_NAME LIKE '%' || #{memberKeyword} || '%'
        </if>
        <if test="date != 0 and date != 1">
            AND CEIL(SYSDATE - TO_DATE(MEMBER_RECENT_LOGIN)) <![CDATA[ <= #{date}]]>
        </if>
        ORDER BY ID DESC
        )
        <![CDATA[
        WHERE ROWNUM <= ${endRow}
        ]]>
        )
        <![CDATA[
        WHERE R >= ${startRow}
        ]]>
    </select>


    <select id="selectMemberInfoAdmin" resultType="memberAdminListDTO">
        SELECT ID, MEMBER_NAME, MEMBER_PHONE, MEMBER_EMAIL, TO_CHAR(MEMBER_RECENT_LOGIN, 'YYYY-MM-DD') AS MEMBER_RECENT_LOGIN, MEMBER_STATUS, MEMBER_PROFILE_PATH, TO_CHAR(CREATED_DATE, 'YYYY-MM-DD') AS CREATED_DATE
        FROM TBL_MEMBER
        WHERE ID = #{id}
    </select>

    <update id="update">
        UPDATE TBL_MEMBER
        SET MEMBER_STATUS = #{memberStatus}
        WHERE ID = #{id}
    </update>

    <select id="countAll" resultType="_int">
        SELECT COUNT(*)
        FROM (
        SELECT ID, MEMBER_NAME, MEMBER_EMAIL, CREATED_DATE, MEMBER_RECENT_LOGIN, MEMBER_STATUS
        FROM TBL_MEMBER
        WHERE ID IS NOT NULL
        <if test="status != 'all' and status != null">
            AND MEMBER_STATUS = #{status}
        </if>
        <if test="memberKeyword != null">
            AND MEMBER_NAME LIKE '%' || #{memberKeyword} || '%'
        </if>
        <if test="date != 0 and date != 1">
            AND CEIL(SYSDATE - TO_DATE(MEMBER_RECENT_LOGIN)) <![CDATA[ <= #{date}]]>
        </if>
        )
    </select>
    <!--    마이페이지 정보조회-->
    <select id="selectByIdForInfo" resultType="memberVO">
        SELECT MEMBER_EMAIL, MEMBER_PHONE, MEMBER_STATUS, ID, MEMBER_NAME, MEMBER_PHONE, MEMBER_BIRTH, MEMBER_RECENT_LOGIN, MEMBER_EMAIL, MEMBER_PROFILE_PATH, MEMBER_CLASS, MEMBER_POINT, MEMBER_STATUS, UPDATED_DATE
        FROM TBL_MEMBER m
        WHERE m.ID = #{id}
    </select>
    <!--    마이페이지 수정-->
    <update id="updateMember" >
        UPDATE TBL_MEMBER
        SET MEMBER_NAME = #{memberName}
        WHERE ID = #{id}
    </update>
<!--    회원 탈퇴-->
    <delete id="memberDelete">
        DELETE FROM TBL_MEMBER WHERE ID = #{id}
    </delete>
<!-- 결제내역 저장 -->
    <insert id="insertPayHistory">
        INSERT INTO TBL_MEMBER_CHARGE
            (ID, MEMBER_ID, CHARGE, PAYMENT_STATUS_LOCALE)
        VALUES (SEQ_PAYMENT.NEXTVAL, #{memberId}, #{charge}, #{paymentStatusLocale})
    </insert>

<!--    <insert id="insertPayHistory">-->
<!--        INSERT INTO TBL_PAYMENT-->
<!--            (ID, MEMBER_ID, PAYMENT_POINT, PAYMENT_STATUS_LOCALE)-->
<!--        VALUES (SEQ_PAYMENT.NEXTVAL, #{memberId}, #{paymentPoint}, #{paymentStatusLocale})-->
<!--    </insert>-->
<!--    원본-->
<!--결제내역 조회-->
    <select id="selectPayHistory" resultType="payDTO">
        SELECT PAYMENT_STATUS_LOCALE, CHARGE, CREATED_DATE, UPDATED_DATE, MEMBER_ID
        FROM TBL_MEMBER_CHARGE MC
        WHERE MC.MEMBER_ID = #{id}
    </select>
<!-- 원본-->
<!--    <select id="selectPayHistory" resultType="payDTO">-->
<!--        SELECT PAYMENT_STATUS_LOCALE, PAYMENT_POINT, CREATED_DATE, UPDATED_DATE, MEMBER_ID-->
<!--        FROM TBL_PAYMENT P-->
<!--        WHERE P.MEMBER_ID = #{id}-->
<!--    </select>-->
<!--    체험비용 지불 -->
    <update id="charge">
        UPDATE TBL_MEMBER
        SET MEMBER_POINT = MEMBER_POINT + #{charge}
        WHERE ID = #{memberId}
    </update>

    <update id="pay">
        UPDATE TBL_MEMBER
        SET MEMBER_POINT = MEMBER_POINT - #{programPrice}
        WHERE ID = #{memberId}
    </update>
</mapper>